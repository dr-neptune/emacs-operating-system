#+TITLE: Emacs Operating System
#+AUTHOR: Neptune
* Ideas

Really dig into my core use cases and upgrade tooling for each
- dev work
  - python
  - js/ts
  - racket
  - clojure
  - rust
- org mode
- writing for D&D
- reading pdfs and taking notes

ideally:
- file management
- terminal usage (eshell fails on some things)
- environment management (particularly python env mgmt)
  - update: uv mode seems to be what I'm looking for
- email management
- calendar management

* Package Management

#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-archives
      '(("elpy"         . "http://jorgenschaefer.github.io/packages/")
        ("melpa"        . "https://melpa.org/packages/")
        ("gnu"          . "http://elpa.gnu.org/packages/")
        ("nongnu"       . "https://elpa.nongnu.org/nongnu/")
        ("melpa-stable" . "https://stable.melpa.org/packages/")))

(package-initialize)

(unless package-archive-contents
  (package-refresh-contents))

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(require 'use-package)
#+END_SRC

* Global State

This state is for adding file paths that are relevant when I'm on a
windows machine.

#+BEGIN_SRC emacs-lisp
(defmacro my/define-os-state (states)
  "Define OS-specific variables from a list of (VAR WINDOWS-VALUE DEFAULT-VALUE).
On Windows, each VAR is set to WINDOWS-VALUE; on non-Windows, each VAR is set
to DEFAULT-VALUE."
  `(progn
     ,@(mapcar
        (lambda (entry)
          (let ((var (nth 0 entry))
                (win-val (nth 1 entry))
                (default (nth 2 entry)))
            `(progn
               (defvar ,var ,default ,(format "OS-specific variable %s." (symbol-name var)))
               (when (eq system-type 'windows-nt)
                 (setq ,var ,win-val)))))
        states)))

;; Usage: define your OS-specific variables in one place
(my/define-os-state
 ((my/copilot-path       ".emacs.d/copilot.el" nil)
  (my/adoel-path         "code/adoel/" nil)))
#+END_SRC


* Global Settings

#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :init
    ;; Make the *scratch* buffer use Org mode by default
    (setq initial-major-mode 'org-mode
	  initial-scratch-message "#+title: Scratch\n\n")

    ;; Show the time in the mode line
    (display-time)

    ;; Remove clutter from the UI
    (tool-bar-mode -1)
    (blink-cursor-mode 0)
    (when (fboundp 'scroll-bar-mode)
      (scroll-bar-mode -1))

    ;; Tells use-package to auto-install packages, if needed
    (setq use-package-always-ensure t)

    ;; Safe to load all themes (or replace with specific checks)
    (setq custom-safe-themes t)

    ;; UI / Behavior
    (setq inhibit-startup-message t
	  ring-bell-function 'ignore
	  completion-cycle-threshold 3  ;; TAB cycles when only few candidates
	  tab-always-indent 'complete)  ;; Indent + complete on TAB

    ;; Dired display
    (setq dired-listing-switches "-1")

    ;; If on macOS or X-based system, inherit env vars from the user shell
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize))

    ;; Keep backup files (~) all in one place
    (setq backup-directory-alist '(("." . "~/.emacs.d/backups"))
	  backup-by-copying t         ; Don’t clobber symlinks
	  version-control t           ; Use version numbers for backups
	  delete-old-versions t
	  kept-new-versions 6
	  kept-old-versions 2)

    ;; Pair parentheses and quotes automatically
    (electric-pair-mode 1)

    ;; Highlight matching parentheses
    (show-paren-mode 1)

    ;; Automatically delete trailing whitespace before save
    (add-hook 'before-save-hook 'delete-trailing-whitespace)

    ;; Enable auto-fill in text modes
    (add-hook 'text-mode-hook 'turn-on-auto-fill)

    ;; Autosave files: store them in a dedicated folder if you like
    (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

    :config
    ;; Turn off the menu bar (you could also do tool-bar-mode -1, scroll-bar-mode -1, etc.)
    (menu-bar-mode -1)

    ;; Make “yes or no?” prompts into “y or n”
    (if (boundp 'use-short-answers)
	(setq use-short-answers t)
      (advice-add 'yes-or-no-p :override #'y-or-n-p))

    ;; Set default font
    ;; download from https://www.jetbrains.com/lp/mono/
    (custom-set-faces '(default ((t (:family "JetBrains Mono" :foundry "outline" :slant normal :weight regular :height 98 :width normal)))))

    ;; Enable ligatures
    (dolist (char/ligature-re
	     `((?-  . ,(rx (or (or "-->" "-<<" "->>" "-|" "-~" "-<" "->") (+ "-"))))
	       (?/  . ,(rx (or (or "/==" "/=" "/>" "/**" "/*") (+ "/"))))
	       (?*  . ,(rx (or (or "*>" "*/") (+ "*"))))
	       (?<  . ,(rx (or (or "<<=" "<<-" "<|||" "<==>" "<!--" "<=>" "<||" "<|>" "<-<"
				   "<==" "<=<" "<-|" "<~>" "<=|" "<~~" "<$>" "<+>" "</>"
				   "<*>" "<->" "<=" "<|" "<:" "<>"  "<$" "<-" "<~" "<+"
				   "</" "<*")
			       (+ "<"))))
	       (?:  . ,(rx (or (or ":?>" "::=" ":>" ":<" ":?" ":=") (+ ":"))))
	       (?=  . ,(rx (or (or "=>>" "==>" "=/=" "=!=" "=>" "=:=") (+ "="))))
	       (?!  . ,(rx (or (or "!==" "!=") (+ "!"))))
	       (?>  . ,(rx (or (or ">>-" ">>=" ">=>" ">]" ">:" ">-" ">=") (+ ">"))))
	       (?&  . ,(rx (+ "&")))
	       (?|  . ,(rx (or (or "|->" "|||>" "||>" "|=>" "||-" "||=" "|-" "|>"
				   "|]" "|}" "|=")
			       (+ "|"))))
	       (?.  . ,(rx (or (or ".?" ".=" ".-" "..<") (+ "."))))
	       (?+  . ,(rx (or "+>" (+ "+"))))
	       (?\[ . ,(rx (or "[<" "[|")))
	       (?\{ . ,(rx "{|"))
	       (?\? . ,(rx (or (or "?." "?=" "?:") (+ "?"))))
	       (?#  . ,(rx (or (or "#_(" "#[" "#{" "#=" "#!" "#:" "#_" "#?" "#(")
			       (+ "#"))))
	       (?\; . ,(rx (+ ";")))
	       (?_  . ,(rx (or "_|_" "__")))
	       (?~  . ,(rx (or "~~>" "~~" "~>" "~-" "~@")))
	       (?$  . ,(rx "$>"))
	       (?^  . ,(rx "^="))
	       (?\] . ,(rx "]#"))))
      (let ((char (car char/ligature-re))
	    (ligature-re (cdr char/ligature-re)))
	(set-char-table-range composition-function-table char
			      `([,ligature-re 0 font-shape-gstring])))))
#+END_SRC

idea: can we add a nice startup screen?

* Dired

#+BEGIN_SRC emacs-lisp
(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :bind (:map dired-mode-map
              ("<tab>" . dired-subtree-toggle))
  :hook ((dired-mode . dired-hide-details-mode)
         (dired-mode . all-the-icons-dired-mode))
  :config
  (setq dired-listing-switches "-1"))

(use-package dired-subtree
  :after dired)

(use-package all-the-icons-dired
  :after dired)
#+END_SRC

* Pomodoro

#+BEGIN_SRC emacs-lisp
(use-package pomodoro
  :bind (([f8] . pomodoro-start)
         ([f7] . pomodoro-stop))
  :hook (emacs-startup . pomodoro-add-to-mode-line))
#+END_SRC

* Org
#+BEGIN_SRC emacs-lisp
(use-package org
  :bind (:map org-mode-map
              ("C-q" . org-fill-paragraph))
  :config
  ;; General Org settings
  (setq org-ellipsis " ▾"
        org-hide-emphasis-markers t
        org-todo-keywords
        '((sequence "TODO" "STARTED" "WAITING" "MAYBE" "|" "CANCEL" "DONE"))
        ;; Disable automatic indentation of source blocks
        org-src-preserve-indentation t
        org-edit-src-content-indentation 0))

(use-package org-modern
  :after org
  :config
  ;; Enable globally for all Org buffers
  (global-org-modern-mode)

  ;; Custom fold symbols, etc.
  (setq org-modern-fold-stars
        '(("▶" . "▼")
          ("  ▷" . "  ▽")
          ("    ▷" . "    ▽")
          ("      ▹" . "      ▿")
          ("      ▸" . "      ▾"))))

(use-package org-download
  :after org)
#+END_SRC

* Navigation

#+BEGIN_SRC emacs-lisp
(use-package deadgrep
  :commands (deadgrep))

(use-package recentf
  :ensure nil
  :init
  ;; Path to store the recentf list. Adjust if desired.
  (setq recentf-save-file (concat user-emacs-directory ".recentf")
        recentf-max-menu-items 40)
  :config
  (recentf-mode 1))

(use-package crux)

(defun smarter-move-beginning-of-line (arg)
  (interactive "^p")
  (setq arg (or arg 1))
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))
  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))

(use-package vertico
  :init
  (vertico-mode))

(use-package vertico-directory
  :after vertico
  :ensure nil ;; Part of vertico; no separate installation needed
  :bind (:map vertico-map
         ("RET"   . vertico-directory-enter)
         ("DEL"   . vertico-directory-delete-char)
         ("M-DEL" . vertico-directory-delete-word))
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))

(use-package orderless
  :init
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))

(use-package consult
  :bind (("C-x b" . consult-buffer))
  :hook (completion-list-mode . consult-preview-at-point-mode)
  :init
  ;; Registers
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)
  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)
  (advice-add #'register-preview :override #'consult-register-window)
  :config
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   :preview-key '(:debounce 0.4 any))
  (setq consult-narrow-key "<"))

(use-package ctrlf
  :init
  (ctrlf-mode +1))

(use-package marginalia
  :init
  (marginalia-mode))

(use-package embark
  :bind (("C-b" . embark-act)   ;; pick some comfortable binding
         ("M-." . embark-dwim)) ;; good alternative: M-.
  :init
  (setq prefix-help-command #'embark-prefix-help-command)
  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

(use-package embark-consult
  :after (embark consult)
  :ensure t)

(use-package corfu
  :custom
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
  (corfu-separator ?\s)          ;; Orderless field separator
  (corfu-auto-delay 1)
  (corfu-auto-prefix 0)
  :init
  (global-corfu-mode)
  :config
  ;; Turn off Corfu auto-completion in eshell
  (add-hook 'eshell-mode-hook
            (lambda ()
              (setq-local corfu-auto nil)
              (corfu-mode))))

(use-package cape
  :init
  ;; Add multiple CAPE completion sources to `completion-at-point-functions'.
  (dolist (f '(cape-dabbrev
               cape-file
               cape-history
               cape-keyword
               cape-tex
               cape-sgml
               cape-rfc1345
               cape-abbrev
               cape-ispell
               cape-dict
               cape-symbol
               cape-line))
    (add-to-list 'completion-at-point-functions f)))

(defun prev-window ()
  (interactive)
  (other-window -1))
#+END_SRC

* Key Bindings

#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors)

(use-package general
  :config
  (general-define-key
   ;; Window / buffer manipulation
   "C-x o"   'next-multiframe-window
   "C-x p"   'previous-multiframe-window
   "C-x C-o" 'crux-transpose-windows
   "C-r"     'hydra-buffers/body

   ;; Basic editing
   "M-w"     'kill-ring-save
   "C-w"     'kill-region
   "C-z"     'undo
   "C-x s"   'save-buffer

   ;; Search
   "C-s"     'ctrlf-forward-default
   "C-S-s"   'ctrlf-backward-default

   ;; Move to smarter beginning of line
   "C-a"     'smarter-move-beginning-of-line

   ;; disable scroll lock
   "<Scroll_Lock>" '()
   "<scroll>" '()))

(use-package hydra
  :config
  (defhydra hydra-buffers (:timeout 3)
    ("<right>" enlarge-window-horizontally "wider")
    ("<left>"  shrink-window-horizontally  "thinner")
    ("<up>"    enlarge-window              "taller")
    ("<down>"  shrink-window              "smaller")))
#+END_SRC

* UI

#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :init
  (load-theme 'doom-dracula t))

(use-package spacious-padding
  :config
  (spacious-padding-mode 1))

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

(use-package kind-icon
  :after corfu
  :custom
  (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

(use-package all-the-icons)

(use-package doom-modeline
  :init
  (doom-modeline-mode 1))
#+END_SRC

* Git

#+BEGIN_SRC emacs-lisp
(use-package magit
  :config
  (setq magit-refresh-verbose t)

  ;; magit is slow on windows. This strips it way down
  ;; https://jakemccrary.com/blog/2020/11/14/speeding-up-magit/
  (when (eq system-type 'windows-nt)
    (remove-hook 'magit-status-sections-hook 'magit-insert-diff-filter-header)
    (remove-hook 'magit-status-sections-hook 'magit-insert-head-branch-header)
    (remove-hook 'magit-status-sections-hook 'magit-insert-upstream-branch-header)
    (remove-hook 'magit-status-sections-hook 'magit-insert-push-branch-header)
    (remove-hook 'magit-status-sections-hook 'magit-insert-tags-header)
    (remove-hook 'magit-status-sections-hook 'magit-insert-status-headers)
    (remove-hook 'magit-status-sections-hook 'magit-insert-merge-log)
    (remove-hook 'magit-status-sections-hook 'magit-insert-rebase-sequence)
    (remove-hook 'magit-status-sections-hook 'magit-insert-am-sequence)
    (remove-hook 'magit-status-sections-hook 'magit-insert-sequencer-sequence)
    (remove-hook 'magit-status-sections-hook 'magit-insert-bisect-output)
    (remove-hook 'magit-status-sections-hook 'magit-insert-bisect-rest)
    (remove-hook 'magit-status-sections-hook 'magit-insert-bisect-log)
    (remove-hook 'magit-status-sections-hook 'magit-insert-stashes)
    (remove-hook 'magit-status-sections-hook 'magit-insert-unpushed-to-pushremote)
    (remove-hook 'magit-status-sections-hook 'magit-insert-unpushed-to-upstream-or-recent)
    (remove-hook 'magit-status-sections-hook 'magit-insert-unpulled-from-pushremote)
    (remove-hook 'magit-status-sections-hook 'magit-insert-unpulled-from-upstream)))
#+END_SRC

* Eshell

#+BEGIN_SRC emacs-lisp
(defun efs/configure-eshell ()
  ;; Save command history when commands are entered
  (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

  ;; Truncate buffer for performance
  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

  (setq eshell-history-size         100
        eshell-buffer-maximum-lines 100
        eshell-hist-ignoredups      t
        eshell-scroll-to-bottom-on-input t))

(use-package eshell-git-prompt)

(use-package eshell
  :hook (eshell-first-time-mode . efs/configure-eshell)
  :config
  ;; When the subshell process dies, kill the eshell buffer
  (with-eval-after-load 'esh-opt
    (setq eshell-destroy-buffer-when-process-dies t)
    (setq eshell-visual-commands '("htop" "zsh" "vim")))

  ;; Use the powerline theme from eshell-git-prompt
  (eshell-git-prompt-use-theme 'powerline)

  ;; Function to open a new Eshell buffer with a unique name
  (defun my/eshell-new ()
    "Open a new instance of Eshell in a uniquely named buffer."
    (interactive)
    (let ((eshell-buffer-name (generate-new-buffer-name "*eshell*")))
      (eshell t))))

(use-package eshell-syntax-highlighting
  :after esh-mode
  :config
  ;; Enable in all Eshell buffers
  (eshell-syntax-highlighting-global-mode))

(use-package simple-httpd
  :init
  (setq httpd-port 8000))
#+END_SRC

* yasnippet

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :bind
  ("<backtab>" . yas-expand)
  :config
  (let ((local-snippets-dir
         (expand-file-name "snippets"
                           (file-name-directory
                            (or load-file-name (buffer-file-name))))))
    (unless (file-exists-p local-snippets-dir)
      (make-directory local-snippets-dir t))
    (add-to-list 'yas-snippet-dirs local-snippets-dir))

  (yas-reload-all)
  (yas-global-mode 1))

(use-package consult-yasnippet)
(use-package yasnippet-snippets)
#+END_SRC

* PDFs

#+BEGIN_SRC emacs-lisp
(use-package pdf-tools)

(pdf-tools-install)
#+END_SRC

* General Programming

#+BEGIN_SRC emacs-lisp
(use-package treesit-auto
  :config
  (global-treesit-auto-mode))

(use-package projectile
  :bind (:map projectile-mode-map
              ("C-c p" . projectile-command-map))
  :custom
  (projectile-completion-system 'auto)
  :config
  (projectile-mode +1))

(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :config)

(use-package lsp-ui
  :commands lsp-ui-mode
  :hook (lsp-mode . lsp-ui-mode))

;; debugger 
(use-package dape)
#+END_SRC

* Copilot

#+BEGIN_SRC emacs-lisp
(use-package copilot
  :if (and (boundp 'my/copilot-path) my/copilot-path)
  :load-path my/copilot-path
  :hook (prog-mode . copilot-mode)
  :bind (:map copilot-completion-map
         ("<tab>" . copilot-accept-completion)
         ("TAB"   . copilot-accept-completion)))
#+END_SRC

* COMMENT Racket

#+BEGIN_SRC emacs-lisp
(use-package racket-mode
  :hook
  ((racket-mode . racket-xp-mode)
   (racket-mode . corfu-mode))
  :config
  (defun custom-racket-send-definition ()
    (interactive)
    (if (use-region-p)
        (let ((start (region-beginning))
              (end   (region-end)))
          (racket-send-region start end)
          (goto-char end)
          (deactivate-mark))
      (let* ((start (point))
             (end   (progn
                      (ignore-errors (backward-up-list))
                      (forward-sexp)
                      (point))))
        (when (and start end (<= start end))
          (goto-char start)
          (racket-send-definition))
        (if (= start end)
            (newline-and-indent)
          (goto-char end)))))

  ;; Define custom keybindings in racket-mode, xp-mode, and repl-mode
  (general-define-key
   :keymaps '(racket-mode-map racket-xp-mode-map racket-repl-mode-map)
   ;; Evaluate current definition/region
   "C-c C-c" 'custom-racket-send-definition
   ;; Open the Racket REPL
   "C-c C-p" 'racket-repl
   ;; Insert λ symbol
   "C-c C-l" "λ"
   ;; Show documentation
   "C-c d"   'racket-xp-documentation))
#+END_SRC

* COMMENT Clojure

#+BEGIN_SRC emacs-lisp
(use-package clojure-mode
  :mode (("\\.clj\\'"  . clojure-mode)
         ("\\.cljs\\'" . clojure-mode)
         ("\\.cljc\\'" . clojure-mode)
         ("\\.edn\\'"  . clojure-mode))
  :config
  ;; Highlight debugging annotations and extra font lock inside comment forms
  (setq clojure-toplevel-inside-comment-form t))

(use-package cider
  :hook (clojure-mode . cider-mode)
  :config
  (setq nrepl-log-messages t
        cider-repl-history-file "~/.emacs.d/cider-repl-history"
        cider-repl-history-size 100
        cider-repl-popup-stacktraces t
        cider-repl-display-help-banner nil
        cider-font-lock-dynamically '(core deprecated macro namespace))
  ;; Also enable Eldoc in CIDER REPL buffers
  (add-hook 'cider-repl-mode-hook #'eldoc-mode))

(use-package clj-refactor
  :after clojure-mode
  :hook (clojure-mode . clj-refactor-mode)
  :config
  ;; Add all refactor bindings (prefix is "C-c C-m" by default)
  (cljr-add-keybindings-with-prefix "C-c C-m"))

(use-package flycheck
  :hook ((clojure-mode . flycheck-mode)
         (cider-repl-mode . flycheck-mode))
  :config
  (use-package flycheck-clj-kondo
    :ensure t
    :after flycheck))

(use-package eldoc
  :hook ((clojure-mode . eldoc-mode)
         (cider-repl-mode . eldoc-mode)))
#+END_SRC

* Rust

#+BEGIN_SRC emacs-lisp

#+END_SRC


* Python

#+BEGIN_SRC emacs-lisp
(use-package uv-mode
  :hook ((python-mode python-ts-mode) . uv-mode-auto-activate-hook))

(use-package python-mode
  :custom
  (python-shell-interpreter "ipython")
  :hook
  (python-ts-mode . lsp-deferred))

;; python-x provides additional convenience functions/macros for Python
(use-package python-x
  :after python-mode)

;; Elpy: Python IDE features (autocompletion, debugging, etc.)
(use-package elpy
  :init
  (elpy-enable))

;; Custom function to send either the region or the statement to the Elpy shell
(defun my-elpy-send ()
  "Send the active region or current statement to the Elpy shell and advance."
  (interactive)
  (if (region-active-p)
      (elpy-shell-send-region-or-buffer-and-step)
    (elpy-shell-send-statement-and-step)))

;; Keybindings for Python buffers and Elpy
(use-package general
  :config
  (general-define-key
   :keymaps '(python-mode-map python-ts-mode-map elpy-mode-map)
   ;; Evaluate code
   "C-c C-c"      'my-elpy-send
   "C-S-c C-c"    'my-elpy-send
   ;; Switch to the Elpy shell
   "C-c C-p"      'elpy-shell-switch-to-shell
   "C-c p"        'elpy-shell-switch-to-shell
   ;; LSP UI helpers
   "C-c d"        'lsp-ui-doc-glance
   "C-c f"        'lsp-ui-peek-find-definitions
   ;; Search with deadgrep
   "C-c C-g"      'deadgrep
   ;; Quick replace
   "C-c '"        'replace-regexp
   ;; Kill word backwards
   "C-<backspace>" 'backward-kill-word))
#+END_SRC

* Web & TypeScript

#+BEGIN_SRC emacs-lisp
(use-package js
  :ensure nil  ;; Built-in
  :mode ("\\.js\\'" . js-ts-mode)
  :hook (js-ts-mode . lsp-deferred)
  :config
  (setq js-ts-mode-indent-offset 2))

(use-package typescript-ts-mode
  :ensure nil  ;; Built-in in Emacs 29+
  :mode (("\\.ts\\'" . typescript-ts-mode)
         ("\\.tsx\\'" . tsx-ts-mode))
  :hook ((typescript-ts-mode . lsp-deferred)
         (tsx-ts-mode        . lsp-deferred))
  :config
  (setq typescript-ts-mode-indent-offset 2))

(use-package css-ts-mode
  :ensure nil  ;; Built-in in Emacs 29+
  :mode ("\\.css\\'" . css-ts-mode)
  :hook (css-ts-mode . lsp-deferred)
  :config
  (setq css-ts-mode-indent-offset 2))

(use-package html-mode
  :ensure nil  ;; Built-in
  :mode ("\\.html?\\'" . html-ts-mode)
  :hook (html-ts-mode . lsp-deferred)
  :config
  (setq html-ts-mode-indent-offset 2))
#+END_SRC

* ado.el

See https://github.com/dr-neptune/ado.el

#+BEGIN_SRC emacs-lisp
(use-package azure-devops
  :if (and (boundp 'my/adoel-path) my/adoel-path)
  :load-path my/adoel-path
  :init
  ;; Provide empty (or real) values for your DevOps variables.
  (setq azure-devops-username           ""
        azure-devops-organization-url   ""
        azure-devops-project-name       ""
        azure-devops-pat                "")
  :bind
  ("C-c d" . azure-devops-menu))
#+END_SRC
