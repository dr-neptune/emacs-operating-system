#+TITLE: Emacs Operating System
#+AUTHOR: Neptune

* Package Management

#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-archives
      '(("elpy"         . "http://jorgenschaefer.github.io/packages/")
        ("melpa"        . "https://melpa.org/packages/")
        ("gnu"          . "http://elpa.gnu.org/packages/")
        ("nongnu"       . "https://elpa.nongnu.org/nongnu/")
        ("melpa-stable" . "https://stable.melpa.org/packages/")))

(package-initialize)

(unless package-archive-contents
  (package-refresh-contents))

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(require 'use-package)
#+END_SRC


* Global Settings

#+BEGIN_SRC emacs-lisp
(use-package emacs
  :init
  ;; Make the *scratch* buffer use Org mode by default
  (setq initial-major-mode 'org-mode
        initial-scratch-message "#+title: Scratch\n\n")

  ;; Show the time in the mode line
  (display-time)

  ;; Remove clutter from the UI
  (tool-bar-mode -1)
  (blink-cursor-mode 0)
  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))

  ;; Tells use-package to auto-install packages, if needed
  (setq use-package-always-ensure t)

  ;; Safe to load all themes (or replace with specific checks)
  (setq custom-safe-themes t)

  ;; UI / Behavior
  (setq inhibit-startup-message t
        ring-bell-function 'ignore
        completion-cycle-threshold 3  ;; TAB cycles when only few candidates
        tab-always-indent 'complete)  ;; Indent + complete on TAB

  ;; Dired display
  (setq dired-listing-switches "-1")

  ;; If on macOS or X-based system, inherit env vars from the user shell
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))

  ;; Keep backup files (~) all in one place
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups"))
        backup-by-copying t         ; Don’t clobber symlinks
        version-control t           ; Use version numbers for backups
        delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2)

  ;; Pair parentheses and quotes automatically
  (electric-pair-mode 1)

  ;; Highlight matching parentheses
  (show-paren-mode 1)

  ;; Automatically delete trailing whitespace before save
  (add-hook 'before-save-hook 'delete-trailing-whitespace)

  ;; Enable auto-fill in text modes
  (add-hook 'text-mode-hook 'turn-on-auto-fill)

  ;; Autosave files: store them in a dedicated folder if you like
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

  :config
  ;; Turn off the menu bar (you could also do tool-bar-mode -1, scroll-bar-mode -1, etc.)
  (menu-bar-mode -1)

  ;; Make “yes or no?” prompts into “y or n”
  (if (boundp 'use-short-answers)
      (setq use-short-answers t)
    (advice-add 'yes-or-no-p :override #'y-or-n-p))

  ;; Set default font
  (set-face-attribute 'default nil :font "JetBrainsMono")

  ;; Enable ligatures
  (dolist (char/ligature-re
	   `((?-  . ,(rx (or (or "-->" "-<<" "->>" "-|" "-~" "-<" "->") (+ "-"))))
	     (?/  . ,(rx (or (or "/==" "/=" "/>" "/**" "/*") (+ "/"))))
	     (?*  . ,(rx (or (or "*>" "*/") (+ "*"))))
	     (?<  . ,(rx (or (or "<<=" "<<-" "<|||" "<==>" "<!--" "<=>" "<||" "<|>" "<-<"
				 "<==" "<=<" "<-|" "<~>" "<=|" "<~~" "<$>" "<+>" "</>"
				 "<*>" "<->" "<=" "<|" "<:" "<>"  "<$" "<-" "<~" "<+"
				 "</" "<*")
			     (+ "<"))))
	     (?:  . ,(rx (or (or ":?>" "::=" ":>" ":<" ":?" ":=") (+ ":"))))
	     (?=  . ,(rx (or (or "=>>" "==>" "=/=" "=!=" "=>" "=:=") (+ "="))))
	     (?!  . ,(rx (or (or "!==" "!=") (+ "!"))))
	     (?>  . ,(rx (or (or ">>-" ">>=" ">=>" ">]" ">:" ">-" ">=") (+ ">"))))
	     (?&  . ,(rx (+ "&")))
	     (?|  . ,(rx (or (or "|->" "|||>" "||>" "|=>" "||-" "||=" "|-" "|>"
				 "|]" "|}" "|=")
			     (+ "|"))))
	     (?.  . ,(rx (or (or ".?" ".=" ".-" "..<") (+ "."))))
	     (?+  . ,(rx (or "+>" (+ "+"))))
	     (?\[ . ,(rx (or "[<" "[|")))
	     (?\{ . ,(rx "{|"))
	     (?\? . ,(rx (or (or "?." "?=" "?:") (+ "?"))))
	     (?#  . ,(rx (or (or "#_(" "#[" "#{" "#=" "#!" "#:" "#_" "#?" "#(")
			     (+ "#"))))
	     (?\; . ,(rx (+ ";")))
	     (?_  . ,(rx (or "_|_" "__")))
	     (?~  . ,(rx (or "~~>" "~~" "~>" "~-" "~@")))
	     (?$  . ,(rx "$>"))
	     (?^  . ,(rx "^="))
	     (?\] . ,(rx "]#"))))
    (let ((char (car char/ligature-re))
	  (ligature-re (cdr char/ligature-re)))
      (set-char-table-range composition-function-table char
			    `([,ligature-re 0 font-shape-gstring])))))
#+END_SRC

idea: can we add a nice startup screen?

* Dired

#+BEGIN_SRC emacs-lisp
(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :bind (:map dired-mode-map
              ("<tab>" . dired-subtree-toggle))
  :hook ((dired-mode . dired-hide-details-mode)
         (dired-mode . all-the-icons-dired-mode))
  :config
  (setq dired-listing-switches "-1"))

(use-package dired-subtree
  :after dired)

(use-package all-the-icons-dired
  :after dired)
#+END_SRC

* Pomodoro

#+BEGIN_SRC emacs-lisp
(use-package pomodoro
  :bind (([f8] . pomodoro-start)
         ([f7] . pomodoro-stop))
  :hook (emacs-startup . pomodoro-add-to-mode-line))
#+END_SRC

* Org

#+BEGIN_SRC emacs-lisp
(use-package org
  :bind (:map org-mode-map
              ("C-q" . org-fill-paragraph))
  :config
  ;; General Org settings
  (setq org-ellipsis " ▾"
        org-hide-emphasis-markers t
        org-todo-keywords
        '((sequence "TODO" "STARTED" "WAITING" "MAYBE" "|" "CANCEL" "DONE"))
        ;; Disable automatic indentation of source blocks
        org-src-preserve-indentation t
        org-edit-src-content-indentation 0))

(use-package org-modern
  :after org
  :config
  ;; Enable globally for all Org buffers
  (global-org-modern-mode)

  ;; Custom fold symbols, etc.
  (setq org-modern-fold-stars
        '(("▶" . "▼")
          ("▷" . "▽")
          ("▷" . "▽")
          ("▹" . "▿")
          ("▸" . "▾"))))

(use-package org-download
  :after org)
#+END_SRC

* Navigation

#+BEGIN_SRC emacs-lisp
(use-package deadgrep
  :commands (deadgrep))

(use-package recentf
  :ensure nil
  :init
  ;; Path to store the recentf list. Adjust if desired.
  (setq recentf-save-file (concat user-emacs-directory ".recentf")
        recentf-max-menu-items 40)
  :config
  (recentf-mode 1))

(use-package crux)

(defun smarter-move-beginning-of-line (arg)
  (interactive "^p")
  (setq arg (or arg 1))
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))
  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))

(use-package vertico
  :init
  (vertico-mode))

(use-package vertico-directory
  :after vertico
  :ensure nil ;; Part of vertico; no separate installation needed
  :bind (:map vertico-map
         ("RET"   . vertico-directory-enter)
         ("DEL"   . vertico-directory-delete-char)
         ("M-DEL" . vertico-directory-delete-word))
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))

(use-package orderless
  :init
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))

(use-package consult
  :bind (("C-x b" . consult-buffer))
  :hook (completion-list-mode . consult-preview-at-point-mode)
  :init
  ;; Registers
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)
  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)
  (advice-add #'register-preview :override #'consult-register-window)
  :config
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   :preview-key '(:debounce 0.4 any))
  (setq consult-narrow-key "<"))

(use-package ctrlf
  :init
  (ctrlf-mode +1))

(use-package marginalia
  :init
  (marginalia-mode))

(use-package embark
  :bind (("C-b" . embark-act)   ;; pick some comfortable binding
         ("M-." . embark-dwim)) ;; good alternative: M-.
  :init
  (setq prefix-help-command #'embark-prefix-help-command)
  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

(use-package embark-consult
  :after (embark consult)
  :ensure t)

(use-package corfu
  :custom
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
  (corfu-separator ?\s)          ;; Orderless field separator
  (corfu-auto-delay 1)
  (corfu-auto-prefix 0)
  :init
  (global-corfu-mode)
  :config
  ;; Turn off Corfu auto-completion in eshell
  (add-hook 'eshell-mode-hook
            (lambda ()
              (setq-local corfu-auto nil)
              (corfu-mode))))

(use-package cape
  :init
  ;; Add multiple CAPE completion sources to `completion-at-point-functions'.
  (dolist (f '(cape-dabbrev
               cape-file
               cape-history
               cape-keyword
               cape-tex
               cape-sgml
               cape-rfc1345
               cape-abbrev
               cape-ispell
               cape-dict
               cape-symbol
               cape-line))
    (add-to-list 'completion-at-point-functions f)))

(defun prev-window ()
  (interactive)
  (other-window -1))
#+END_SRC

* Key Bindings

#+BEGIN_SRC emacs-lisp
(use-package general
  :config
  (general-define-key
   ;; Window / buffer manipulation
   "C-x p"   'prev-window
   "C-x C-o" 'crux-transpose-windows
   "C-r"     'hydra-buffers/body

   ;; Basic editing
   "M-w"     'kill-ring-save
   "C-w"     'kill-region
   "C-z"     'undo
   "C-x s"   'save-buffer

   ;; Search
   "C-s"     'ctrlf-forward-default
   "C-S-s"   'ctrlf-backward-default

   ;; Move to smarter beginning of line
   "C-a"     'smarter-move-beginning-of-line))

(use-package hydra
  :config
  (defhydra hydra-buffers (:timeout 3)
    ("<right>" enlarge-window-horizontally "wider")
    ("<left>"  shrink-window-horizontally  "thinner")
    ("<up>"    enlarge-window              "taller")
    ("<down>"  shrink-window              "smaller")))
#+END_SRC


* UI

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

(use-package kind-icon
  :after corfu
  :custom
  (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

(use-package all-the-icons)

(use-package doom-modeline
  :init
  (doom-modeline-mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp

#+END_SRC

#+BEGIN_SRC emacs-lisp

#+END_SRC

#+BEGIN_SRC emacs-lisp

#+END_SRC
